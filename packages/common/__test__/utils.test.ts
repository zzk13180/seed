import { describe, expect, test } from 'vitest'
import { arith } from '../utils/arith.util'

describe('float-arith', () => {
  test('decimals are rounded to n after the point', () => {
    expect(0.1 + 0.2).toBeCloseTo(0.3, 15)
    expect(0.1 + 0.2).not.toBeCloseTo(0.3, 16)
    expect(arith.plus(0.1, 0.2)).toBeCloseTo(0.3, 50)
  })

  test('浮点运算', () => {
    expect(arith.plus(0.1, 0.2) === 0.3).toBe(true)
    expect(arith.plus(0.1, 0.2, 0.3) === 0.6).toBe(true)
    expect(arith.plus(2.3, 2.4) === 4.7).toBe(true)
    expect(arith.plus(-1.6, -1) === -2.6).toBe(true)
    expect(arith.plus(-2.0, 63) === 61).toBe(true)
    expect(arith.plus(-3, 7) === 4).toBe(true)
    expect(arith.plus(-221, 38) === -183).toBe(true)
    expect(arith.plus(-1, 0) === -1).toBe(true)
    expect(arith.plus(2.018, 0.001) === 2.019).toBe(true)
    expect(arith.plus(1.3224e10, 1.3224e3) === 13224001322.4).toBe(true)
    expect(arith.plus(1.6e-30, 1.6e-30) === 3.2e-30).toBe(true)
    expect(arith.sub(0.07, 0.01) === 0.06).toBe(true)
    expect(arith.sub(0.07, 0.01, 0.02) === 0.04).toBe(true)
    expect(arith.sub(0.7, 0.1) === 0.6).toBe(true)
    expect(arith.sub(1.0, 0.9) === 0.1).toBe(true)
    expect(arith.sub(1, 0) === 1).toBe(true)
    expect(arith.sub(1, -0) === 1).toBe(true)
    expect(arith.sub(-1, 0) === -1).toBe(true)
    expect(arith.sub(-1, -0) === -1).toBe(true)
    expect(arith.sub(1, 22) === -21).toBe(true)
    expect(arith.sub(105468873, 0) === 105468873).toBe(true)
    expect(arith.sub(1.23e5, 10) === 122990).toBe(true)
    expect(arith.sub(1.23e-5, 1.0023) === -1.0022877).toBe(true)
    expect(arith.sub(1.3224e10, 21) === 13223999979).toBe(true)
    expect(arith.sub(1.3224e10, 1.3224e3) === 13223998677.6).toBe(true)
    expect(arith.sub(1.7e-30, 0.1e-30) === 1.6e-30).toBe(true)
    expect(arith.mul(0.07, 100) === 7).toBe(true)
    expect(arith.mul(0.7, 0.1) === 0.07).toBe(true)
    expect(arith.mul(0.07, 0.01, 0.02) === 0.000014).toBe(true)
    expect(arith.mul(3, 0.3) === 0.9).toBe(true)
    expect(arith.mul(118762317358.75, 1e-8) === 1187.6231735875).toBe(true)
    expect(arith.mul(0.362, 100) === 36.2).toBe(true)
    expect(arith.mul(1.1, 1.1) === 1.21).toBe(true)
    expect(arith.mul(2.018, 1000) === 2018).toBe(true)
    expect(arith.mul(1.22, -1.639344262295082) === -2).toBe(true)
    expect(arith.mul(2.5, -0.92) === -2.3).toBe(true)
    expect(arith.mul(-2.2, 0.6363636363636364) === -1.4).toBe(true)
    expect(arith.mul(8.0, -0.3625) === -2.9).toBe(true)
    expect(arith.mul(6.6, 0.30303030303030304) === 2).toBe(true)
    expect(arith.mul(10.0, -0.8) === -8).toBe(true)
    expect(arith.mul(-1.1, -7.272727272727273) === 8).toBe(true)
    expect(arith.mul(-1.23e4, 20) === -246000).toBe(true)
    expect(arith.mul(1.7e-30, 1.5e20) === 2.55e-10).toBe(true)
    expect(arith.mul(2, 2, 3) === 12).toBe(true)
    expect(arith.mul(2, 2, 3, 0.1) === 1.2).toBe(true)
    expect(arith.mul(0.000000123456, 0.000000123456) === 1.5241383936e-14).toBe(true)
    expect(arith.mul(1.23456e-7, 1.23456e-7) === 1.5241383936e-14).toBe(true)
    expect(arith.div(1.21, 1.1) === 1.1).toBe(true)
    expect(arith.div(4750.49269435, 4) === 1187.6231735875).toBe(true)
    expect(arith.div(0.9, 3) === 0.3).toBe(true)
    expect(arith.div(36.2, 0.362) === 100).toBe(true)
    expect(arith.div(-2, 1.22) === -1.639344262295082).toBe(true)
    expect(arith.div(-2.3, 2.5) === -0.92).toBe(true)
    expect(arith.div(-1.4, -2.2) === 0.6363636363636364).toBe(true)
    expect(arith.div(7, -3) === -2.3333333333333335).toBe(true)
    expect(arith.div(7, -0.076) === -92.10526315789471).toBe(true)
    expect(arith.div(-2.9, 8.0) === -0.3625).toBe(true)
    expect(arith.div(2, 6.6) === 0.30303030303030304).toBe(true)
    expect(arith.div(-8, 10.0) === -0.8).toBe(true)
    expect(arith.div(8, -1.1) === -7.272727272727273).toBe(true)
    expect(arith.div(-1.23e4, 20) === -615).toBe(true)
    expect(arith.div(2.55e-10, 1.7e-30) === 1.5e20).toBe(true)
    expect(arith.div(12, 3, 2) === 2).toBe(true)
    expect(arith.div(33.3333, 100) === 0.333333).toBe(true)
    expect(arith.div(83.42894732749, 100) === 0.8342894732749).toBe(true)
    expect(arith.div(1, 3) === 0.3333333333333333).toBe(true)
    expect(arith.toFixed(0, 1) === 0).toBe(true)
    expect(arith.toFixed(0, 0) === 0).toBe(true)
    expect(arith.toFixed(1.125, 0) === 1).toBe(true)
    expect(arith.toFixed(0.7875, 3) === 0.788).toBe(true)
    expect(arith.toFixed(0.105, 2) === 0.11).toBe(true)
    expect(arith.toFixed(1, 1) === 1).toBe(true)
    expect(arith.toFixed(0.1049999999, 2) === 0.1).toBe(true)
    expect(arith.toFixed(0.105, 1) === 0.1).toBe(true)
    expect(arith.toFixed(1.335, 2) === 1.34).toBe(true)
    expect(arith.toFixed(1.35, 1) === 1.4).toBe(true)
    expect(arith.toFixed(12345.105, 2) === 12345.11).toBe(true)
    expect(arith.toFixed(0.0005, 2) === 0).toBe(true)
    expect(arith.toFixed(0.0005, 3) === 0.001).toBe(true)
    expect(arith.toFixed(1.2345e3, 3) === 1234.5).toBe(true)
    expect(arith.toFixed(1.2344e3, 3) === 1234.4).toBe(true)
    expect(arith.toFixed(1e3, 1) === 1000).toBe(true)
    expect(arith.toFixed(-0.125, 2) === -0.13).toBe(true)
    expect(arith.toFixed(-0.001, 2) === 0.0).toBe(true)
    expect(arith.toFixed(-0.005, 2) === -0.01).toBe(true)
    expect(arith.toFixed(0.125, 2) === 0.13).toBe(true)
    expect(arith.toFixed(0.001, 2) === 0.0).toBe(true)
    expect(arith.toFixed(0.005, 2) === 0.01).toBe(true)
  })
})
