import js from '@eslint/js'

import tsEslintPlugin from '@typescript-eslint/eslint-plugin'
import tsEslintParser from '@typescript-eslint/parser'
import { defineConfig } from 'eslint/config'
import eslintConfigPrettier from 'eslint-config-prettier/flat'
import eslintCommentsPlugin from 'eslint-plugin-eslint-comments'
import regexpPlugin from 'eslint-plugin-regexp'
import globals from 'globals'

import importPlugin from 'eslint-plugin-import'
import promisePlugin from 'eslint-plugin-promise'
import nodePlugin from 'eslint-plugin-node'
import vuePlugin from 'eslint-plugin-vue'
import vueParser from 'vue-eslint-parser'

import svelteEslintParser from 'svelte-eslint-parser'
import eslintPluginSvelte from 'eslint-plugin-svelte'

export default defineConfig([
  {
    ignores: [
      '**/dist/',
      '**/node_modules/',
      '**/.svelte-kit/',
      'apps/doc/',
      'packages/element-plus/',
    ],
  },
  js.configs.recommended,
  {
    plugins: {
      regexp: regexpPlugin,
      import: importPlugin,
      promise: promisePlugin,
      node: nodePlugin,
    },
    languageOptions: {
      ecmaVersion: 'latest',
      sourceType: 'module',
      globals: {
        ...globals.node,
        ...vueGlobals(),
      },
    },
    rules: {
      'no-use-before-define': ['warn', { 'functions': false, 'classes': false }],
      'eqeqeq': ['warn', 'always', { 'null': 'ignore' }],

      // stylistic rules
      'no-var': 'warn',
      'object-shorthand': ['warn', 'always', { avoidQuotes: true }],
      'one-var': ['warn', 'never'],
      'prefer-arrow-callback': 'warn',
      'prefer-const': ['warn', { 'destructuring': 'all' }],
      'prefer-spread': 'warn',

      'curly': 'warn',
      'semi': ['warn', 'never'],
      'quotes': ['warn', 'single', { avoidEscape: true, allowTemplateLiterals: false }],
      'no-restricted-syntax': ['warn', 'LabeledStatement', 'WithStatement'],
      'no-empty': ['warn', { allowEmptyCatch: true }],
      'prefer-template': 'warn',
      'no-unreachable': 'warn',
      'no-void': 'off',
      'no-caller': 'warn',
      'no-div-regex': 'warn',
      'no-eval': 'warn',
      'no-unused-vars': 'off',
      // 'no-unused-vars': [
      //   'warn',
      //   {
      //     argsIgnorePattern: '^_',
      //     varsIgnorePattern: '^_',
      //   },
      // ],
      'no-extend-native': 'warn',
      'no-extra-bind': 'warn',
      'no-floating-decimal': 'warn',
      'lines-between-class-members': ['warn', 'always', { exceptAfterSingleLine: true }],

      // import规则
      'import/first': 'off',
      'import/no-absolute-path': 'warn',
      'import/no-amd': 'warn',
      'import/no-deprecated': 'warn',
      'import/no-mutable-exports': 'warn',
      'import/newline-after-import': 'warn',
      'import/order': [
        'warn',
        {
          groups: [
            'builtin',
            'external',
            'internal',
            'parent',
            'sibling',
            'index',
            'object',
            'type',
          ],
          pathGroupsExcludedImportTypes: ['type'],
        },
      ],

      // regexp
      'regexp/no-dupe-disjunctions': 'warn',
      'regexp/no-empty-alternative': 'warn',
      'regexp/no-empty-capturing-group': 'warn',
      'regexp/no-empty-lookarounds-assertion': 'warn',
      'regexp/no-lazy-ends': 'warn',
      'regexp/no-obscure-range': 'warn',
      'regexp/no-optional-assertion': 'warn',
      'regexp/no-standalone-backslash': 'warn',
      'regexp/no-super-linear-backtracking': 'warn',
      'regexp/no-unused-capturing-group': 'warn',
      'regexp/no-zero-quantifier': 'warn',
      'regexp/optimal-lookaround-quantifier': 'warn',

      'regexp/match-any': 'warn',
      'regexp/negation': 'warn',
      'regexp/no-dupe-characters-character-class': 'warn',
      'regexp/no-trivially-nested-assertion': 'warn',
      'regexp/no-trivially-nested-quantifier': 'warn',
      'regexp/no-useless-character-class': 'warn',
      'regexp/no-useless-flag': 'warn',
      'regexp/no-useless-lazy': 'warn',
      'regexp/no-useless-range': 'warn',
      'regexp/prefer-d': ['warn', { insideCharacterClass: 'ignore' }],
      'regexp/prefer-plus-quantifier': 'warn',
      'regexp/prefer-question-quantifier': 'warn',
      'regexp/prefer-star-quantifier': 'warn',
      'regexp/prefer-w': 'warn',
      'regexp/sort-alternatives': 'warn',
      'regexp/sort-flags': 'warn',
      'regexp/strict': 'warn',

      // I turned this rule off because we use `hasOwnProperty` in a lot of places
      // TODO: Think about re-enabling this rule
      'no-prototype-builtins': 'off',
      // TODO: Think about re-enabling this rule
      'no-inner-declarations': 'off',
      // TODO: Think about re-enabling this rule
      'no-sparse-arrays': 'off',

      // turning off some regex rules
      // these are supposed to protect against accidental use but we need those quite often
      'no-control-regex': 'off',
      'no-empty-character-class': 'off',
      'no-useless-escape': 'off',

      // 代码复杂度
      'complexity': 'warn',
      'max-depth': 'warn',
      'max-lines': ['warn', 1000],
      'max-params': ['warn', 4],

      // 代码风格规则
      'no-lonely-if': 'warn',
      'no-nested-ternary': 'warn',
      'func-style': ['warn', 'declaration', { allowArrowFunctions: true }],
      'no-array-constructor': 'warn',
      'no-bitwise': 'warn',
      'no-multi-assign': 'warn',
      'no-new-object': 'warn',
      'no-unneeded-ternary': 'warn',

      // 错误预防规则
      'no-template-curly-in-string': 'warn',
      'no-unsafe-negation': 'warn',
      'array-callback-return': 'warn',
      'consistent-return': 'warn',
      'guard-for-in': 'warn',
      'no-alert': 'warn',
      'no-implied-eval': 'warn',
      'no-iterator': 'warn',
      'no-labels': 'warn',
      'no-lone-blocks': 'warn',
      'no-loop-func': 'warn',
      'no-new': 'warn',
      'no-new-func': 'warn',
      'no-new-wrappers': 'warn',
      'no-proto': 'warn',
      'no-restricted-properties': 'warn',
      'no-return-assign': 'warn',
      'no-return-await': 'warn',
      'no-self-compare': 'warn',
      'no-sequences': 'warn',
      'no-throw-literal': 'warn',
      'no-unmodified-loop-condition': 'warn',
      'no-unused-expressions': ['warn', { allowShortCircuit: true }],
      'no-useless-call': 'warn',
      'no-useless-concat': 'warn',
      'no-useless-return': 'warn',
      'radix': 'warn',
      'require-await': 'warn',
      'wrap-iife': 'warn',
      'yoda': 'warn',
      'consistent-this': ['warn', 'that'],
    },
    settings: {
      regexp: {
        // allow alphanumeric and cyrillic ranges
        allowedCharacterRanges: ['alphanumeric', 'а-я', 'А-Я'],
      },
      // 添加import设置
      'import/ignore': ['node_modules'],
    },
  },
  {
    files: ['**/*.vue'],
    plugins: {
      vue: vuePlugin,
    },
    languageOptions: {
      globals: {
        ...globals.browser,
      },
      parser: vueParser,
      parserOptions: {
        ecmaVersion: 'latest',
        sourceType: 'module',
        parser: tsEslintParser,
      },
    },
    rules: {
      ...vuePlugin.configs.rules,
      'vue/no-deprecated-slot-attribute': 'off',
      'vue/prefer-import-from-vue': 'off',
      'vue/multi-word-component-names': 'off',
      'vue/valid-define-props': 'off',
      'vue/no-v-model-argument': 'off',
      'vue/no-reserved-component-names': 'off',
      'vue/require-default-prop': 'off',
      'vue/require-explicit-emits': 'off',
      'vue/no-template-shadow': 'off',
      'vue/no-mutating-props': 'off',
      'vue/require-valid-default-prop': 'off',
      'vue/no-unused-vars': 'off',
      'vue/no-v-html': 'off',
      'no-unused-vars': 'off',
      // 'no-unused-vars': [
      //   'warn',
      //   {
      //     argsIgnorePattern: '^_',
      //     varsIgnorePattern: '^_',
      //   },
      // ],
    },
  },
  {
    files: ['**/*.ts'],
    plugins: {
      '@typescript-eslint': tsEslintPlugin,
      'eslint-comments': eslintCommentsPlugin,
      'regexp': regexpPlugin,
    },
    languageOptions: {
      globals: {
        ...globals.browser,
      },
      parser: tsEslintParser,
      parserOptions: {
        projectService: true,
      },
    },
    rules: {
      ...eslintCommentsPlugin.configs.recommended.rules,
      ...tsEslintPlugin.configs.recommended.rules,
      ...tsEslintPlugin.configs['recommended-requiring-type-checking'].rules,
      ...regexpPlugin.configs.recommended.rules,

      'no-use-before-define': 'off',
      'eslint-comments/no-unlimited-disable': 'off',

      // 添加或修改TS规则
      '@typescript-eslint/no-empty-function': 'off',
      '@typescript-eslint/no-explicit-any': 'off',
      '@typescript-eslint/no-unused-vars': 'off',
      '@typescript-eslint/no-this-alias': 'off',
      '@typescript-eslint/naming-convention': 'off',
      '@typescript-eslint/ban-ts-comment': 'off',
      '@typescript-eslint/explicit-module-boundary-types': 'off',
      '@typescript-eslint/no-non-null-assertion': 'off',
      '@typescript-eslint/no-non-null-asserted-optional-chain': 'off',
      '@typescript-eslint/no-var-requires': 'off',

      // I turned this rule off because we use `hasOwnProperty` in a lot of places
      // TODO: Think about re-enabling this rule
      'no-prototype-builtins': 'off',

      // turning off some regex rules
      // these are supposed to protect against accidental use but we need those quite often
      'no-control-regex': 'off',
      'no-empty-character-class': 'off',
      'no-useless-escape': 'off',

      'eslint-comments/disable-enable-pair': ['warn', { allowWholeFile: true }],

      // Allow {} type
      '@typescript-eslint/no-empty-object-type': 'off',

      '@typescript-eslint/consistent-type-imports': ['warn', { disallowTypeAnnotations: true }],

      '@typescript-eslint/no-unsafe-call': 'off',
    },
  },
  {
    files: ['eslint.config.mjs'],
    languageOptions: {
      globals: {
        ...globals.node,
      },
    },
  },
  {
    files: ['**/*.svelte'],
    plugins: {
      svelte: eslintPluginSvelte,
    },
    languageOptions: {
      globals: {
        ...globals.browser,
      },
      parser: svelteEslintParser,
    },
    rules: {
      ...eslintPluginSvelte.configs.recommended.rules,
    },
  },
  eslintConfigPrettier,
])

function vueGlobals() {
  return {
    ComponentInternalInstance: true,
    TransferKey: true,
    ElFormRules: true,
    CheckboxValueType: true,
    PropType: true,
    DateModelType: true,
    UploadFile: true,
    ElFormInstance: true,
    ElTableInstance: true,
    ElTreeInstance: true,
    ElTreeSelectInstance: true,
    ElSelectInstance: true,
    ElUploadInstance: true,
    ElCardInstance: true,
    ElDialogInstance: true,
    ElInputInstance: true,
    ElInputNumberInstance: true,
    ElRadioInstance: true,
    ElRadioGroupInstance: true,
    ElRadioButtonInstance: true,
    ElCheckboxInstance: true,
    ElCheckboxGroupInstance: true,
    ElSwitchInstance: true,
    ElDatePickerInstance: true,
    ElTimePickerInstance: true,
    ElTimeSelectInstance: true,
    ElScrollbarInstance: true,
    ElCascaderInstance: true,
    ElColorPickerInstance: true,
    ElRateInstance: true,
    ElSliderInstance: true,
    useRouter: true,
    useRoute: true,
    EffectScope: true,
    ElTable: true,
    ElSelect: true,
    ElUpload: true,
    ElForm: true,
    ElTree: true,
    ElMessage: true,
    ElMessageBox: true,
    asyncComputed: true,
    autoResetRef: true,
    computed: true,
    computedAsync: true,
    computedEager: true,
    computedInject: true,
    computedWithControl: true,
    controlledComputed: true,
    controlledRef: true,
    createApp: true,
    createEventHook: true,
    createGlobalState: true,
    createInjectionState: true,
    createReactiveFn: true,
    createSharedComposable: true,
    createUnrefFn: true,
    customRef: true,
    debouncedRef: true,
    debouncedWatch: true,
    defineAsyncComponent: true,
    defineComponent: true,
    eagerComputed: true,
    effectScope: true,
    extendRef: true,
    getCurrentInstance: true,
    getCurrentScope: true,
    h: true,
    ignorableWatch: true,
    inject: true,
    isDefined: true,
    isProxy: true,
    isReactive: true,
    isReadonly: true,
    isRef: true,
    makeDestructurable: true,
    markRaw: true,
    nextTick: true,
    onActivated: true,
    onBeforeMount: true,
    onBeforeUnmount: true,
    onBeforeUpdate: true,
    onClickOutside: true,
    onDeactivated: true,
    onErrorCaptured: true,
    onKeyStroke: true,
    onLongPress: true,
    onMounted: true,
    onRenderTracked: true,
    onRenderTriggered: true,
    onScopeDispose: true,
    onServerPrefetch: true,
    onStartTyping: true,
    onUnmounted: true,
    onUpdated: true,
    pausableWatch: true,
    provide: true,
    reactify: true,
    reactifyObject: true,
    reactive: true,
    reactiveComputed: true,
    reactiveOmit: true,
    reactivePick: true,
    readonly: true,
    ref: true,
    refAutoReset: true,
    refDebounced: true,
    refDefault: true,
    refThrottled: true,
    refWithControl: true,
    resolveComponent: true,
    resolveDirective: true,
    resolveRef: true,
    resolveUnref: true,
    shallowReactive: true,
    shallowReadonly: true,
    shallowRef: true,
    syncRef: true,
    syncRefs: true,
    templateRef: true,
    throttledRef: true,
    throttledWatch: true,
    toRaw: true,
    toReactive: true,
    toRef: true,
    toRefs: true,
    triggerRef: true,
    tryOnBeforeMount: true,
    tryOnBeforeUnmount: true,
    tryOnMounted: true,
    tryOnScopeDispose: true,
    tryOnUnmounted: true,
    unref: true,
    unrefElement: true,
    until: true,
    useActiveElement: true,
    useArrayEvery: true,
    useArrayFilter: true,
    useArrayFind: true,
    useArrayFindIndex: true,
    useArrayFindLast: true,
    useArrayJoin: true,
    useArrayMap: true,
    useArrayReduce: true,
    useArraySome: true,
    useArrayUnique: true,
    useAsyncQueue: true,
    useAsyncState: true,
    useAttrs: true,
    useBase64: true,
    useBattery: true,
    useBluetooth: true,
    useBreakpoints: true,
    useBroadcastChannel: true,
    useBrowserLocation: true,
    useCached: true,
    useClipboard: true,
    useCloned: true,
    useColorMode: true,
    useConfirmDialog: true,
    useCounter: true,
    useCssModule: true,
    useCssVar: true,
    useCssVars: true,
    useCurrentElement: true,
    useCycleList: true,
    useDark: true,
    useDateFormat: true,
    useDebounce: true,
    useDebounceFn: true,
    useDebouncedRefHistory: true,
    useDeviceMotion: true,
    useDeviceOrientation: true,
    useDevicePixelRatio: true,
    useDevicesList: true,
    useDisplayMedia: true,
    useDocumentVisibility: true,
    useDraggable: true,
    useDropZone: true,
    useElementBounding: true,
    useElementByPoint: true,
    useElementHover: true,
    useElementSize: true,
    useElementVisibility: true,
    useEventBus: true,
    useEventListener: true,
    useEventSource: true,
    useEyeDropper: true,
    useFavicon: true,
    useFetch: true,
    useFileDialog: true,
    useFileSystemAccess: true,
    useFocus: true,
    useFocusWithin: true,
    useFps: true,
    useFullscreen: true,
    useGamepad: true,
    useGeolocation: true,
    useIdle: true,
    useImage: true,
    useInfiniteScroll: true,
    useIntersectionObserver: true,
    useInterval: true,
    useIntervalFn: true,
    useKeyModifier: true,
    useLastChanged: true,
    useLocalStorage: true,
    useMagicKeys: true,
    useManualRefHistory: true,
    useMediaControls: true,
    useMediaQuery: true,
    useMemoize: true,
    useMemory: true,
    useMounted: true,
    useMouse: true,
    useMouseInElement: true,
    useMousePressed: true,
    useMutationObserver: true,
    useNavigatorLanguage: true,
    useNetwork: true,
    useNow: true,
    useObjectUrl: true,
    useOffsetPagination: true,
    useOnline: true,
    usePageLeave: true,
    useParallax: true,
    usePermission: true,
    usePointer: true,
    usePointerLock: true,
    usePointerSwipe: true,
    usePreferredColorScheme: true,
    usePreferredContrast: true,
    usePreferredDark: true,
    usePreferredLanguages: true,
    usePreferredReducedMotion: true,
    usePrevious: true,
    useRafFn: true,
    useRefHistory: true,
    useResizeObserver: true,
    useScreenOrientation: true,
    useScreenSafeArea: true,
    useScriptTag: true,
    useScroll: true,
    useScrollLock: true,
    useSessionStorage: true,
    useShare: true,
    useSlots: true,
    useSorted: true,
    useSpeechRecognition: true,
    useSpeechSynthesis: true,
    useStepper: true,
    useStorage: true,
    useStorageAsync: true,
    useStyleTag: true,
    useSupported: true,
    useSwipe: true,
    useTemplateRefsList: true,
    useTextDirection: true,
    useTextSelection: true,
    useTextareaAutosize: true,
    useThrottle: true,
    useThrottleFn: true,
    useThrottledRefHistory: true,
    useTimeAgo: true,
    useTimeout: true,
    useTimeoutFn: true,
    useTimeoutPoll: true,
    useTimestamp: true,
    useTitle: true,
    useToNumber: true,
    useToString: true,
    useToggle: true,
    useTransition: true,
    useUrlSearchParams: true,
    useUserMedia: true,
    useVModel: true,
    useVModels: true,
    useVibrate: true,
    useVirtualList: true,
    useWakeLock: true,
    useWebNotification: true,
    useWebSocket: true,
    useWebWorker: true,
    useWebWorkerFn: true,
    useWindowFocus: true,
    useWindowScroll: true,
    useWindowSize: true,
    watch: true,
    watchArray: true,
    watchAtMost: true,
    watchDebounced: true,
    watchEffect: true,
    watchIgnorable: true,
    watchOnce: true,
    watchPausable: true,
    watchPostEffect: true,
    watchSyncEffect: true,
    watchThrottled: true,
    watchTriggerable: true,
    watchWithFilter: true,
    whenever: true,
    ImportOption: true,
    TreeType: true,
    FieldOption: true,
    PageData: true,
    storeToRefs: true,
    DictDataOption: true,
    UploadOption: true,
  }
}
