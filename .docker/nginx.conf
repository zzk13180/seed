worker_processes auto; # 自动设置工作进程数，通常为 CPU 核心数的 1-2 倍

events {
    worker_connections 1024;
}

http {
    charset utf-8; # 设置字符集为 UTF-8
    include       mime.types; # 引入 MIME 类型定义
    default_type  application/octet-stream; # 默认 MIME 类型
    sendfile        on; # 启用高效文件传输模式
    server_tokens off; # 隐藏 nginx 版本号

    keepalive_timeout  65; # 长连接超时时间（秒）

    gzip on; # 启用 gzip 压缩
    gzip_static on;  # 优先使用预压缩的 .gz 文件
    gzip_vary on;    # 添加 Vary: Accept-Encoding 响应头
    gzip_comp_level 6;  # 压缩级别 (1-9)，6 是速度和压缩比的平衡点
    gzip_min_length 1024;  # 小于 1KB 的文件不压缩
    gzip_proxied any;  # 为所有代理请求启用压缩
    gzip_types
        text/plain
        text/css
        text/javascript
        application/javascript
        application/json
        application/xml
        image/svg+xml
        application/wasm
        font/ttf
        font/eot
        font/otf;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";  # 对低版本 IE 禁用

    server {
        listen       80 default_server;      # 监听 IPv4 的 80 端口，作为默认服务器
        listen       [::]:80 default_server; # 监听 IPv6 的 80 端口，作为默认服务器
        server_name  _;                     # 匹配任意主机名

        root /usr/share/nginx/html;        # 网站根目录 (请根据实际情况修改)
        index index.html index.htm;        # 默认索引文件

        # 禁止访问隐藏文件，但允许 .well-known
        location ~ /\.(?!well-known) {
            deny all;
        }

        location / {
            # try_files $uri $uri/ =404;
            try_files $uri $uri/ /index.html;  # 支持前端路由
        }
    }

    # server {
    #     listen       80; # 监听 80 端口
    #     server_name xxxx.com www.xxxx.com; # 匹配指定域名

    #     location / {
    #         return 301 https://www.xxxx.com$request_uri; # 所有请求重定向到 https
    #     }
    # }

    # 默认 HTTPS 服务器（捕获所有未匹配到 www.xxxx.com 的 HTTPS 请求）
    # server {
    #     listen 443 ssl default_server; # 监听 443 端口，默认服务器
    #     server_name _; # 匹配任意主机名

    #     # SSL 通用配置
    #     ssl_certificate      cert/xxxx.com_bundle.crt;
    #     ssl_certificate_key  cert/xxxx.com.key;
    #     ssl_session_cache    shared:SSL:1m;
    #     ssl_session_timeout  5m;
    #     ssl_protocols        TLSv1.2 TLSv1.3; # 明确指定安全协议版本
    #     ssl_ciphers          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers  on;

    #     location / {
    #         return 301 https://www.xxxx.com$request_uri;
    #     }
    # }

    # 主 HTTPS 站点
    # server {
    #     listen 443 ssl http2;
    #     server_name  www.xxxx.com; # 匹配指定域名
    #     root        /usr/share/nginx/html; # 网站根目录

    #     # SSL 通用配置
    #     ssl_certificate      cert/xxxx.com_bundle.crt;
    #     ssl_certificate_key  cert/xxxx.com.key;
    #     ssl_session_cache    shared:SSL:1m;
    #     ssl_session_timeout  5m;
    #     ssl_protocols        TLSv1.2 TLSv1.3; # 明确指定安全协议版本
    #     ssl_ciphers          ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    #     ssl_prefer_server_ciphers  on;

    #     # 安全头部设置
    #     add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    #     add_header X-Content-Type-Options "nosniff" always;
    #     add_header X-Frame-Options "SAMEORIGIN" always;
    #     add_header X-XSS-Protection "1; mode=block" always;
    #     add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    #     # 静态资源缓存
    #     location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot|otf)$ {
    #         expires 30d;
    #         add_header Cache-Control "public, max-age=2592000";
    #         access_log off;
    #     }

    #     # HTML 文件
    #     location ~* \.html$ {
    #         add_header Cache-Control "no-cache, must-revalidate";
    #     }

    #     location / {
    #         try_files $uri $uri/ /index.html; # 静态资源优先，找不到则返回 index.html
    #     }

    #     # 日志配置
    #     access_log /var/log/nginx/access.log;
    #     error_log /var/log/nginx/error.log;
    # }
}
